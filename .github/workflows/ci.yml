name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: swift build
      
    - name: Run tests with coverage
      run: swift test --enable-code-coverage
      
    - name: Generate coverage report
      id: coverage_gen
      run: |
        # Clean and rebuild with coverage for consistent instrumentation
        swift package clean
        swift test --enable-code-coverage
        
        # Find the test executable path (different on different platforms)
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          TEST_EXECUTABLE=$(find .build -name "TaiwanUnitsPackageTests.xctest" -type d | head -1)
          if [[ -n "$TEST_EXECUTABLE" ]]; then
            TEST_BINARY="$TEST_EXECUTABLE/Contents/MacOS/TaiwanUnitsPackageTests"
          fi
          LLVM_COV="xcrun llvm-cov"
        else
          TEST_BINARY=$(find .build -name "TaiwanUnitsPackageTests.xctest" -type f | head -1)
          LLVM_COV="llvm-cov"
        fi
        
        # Generate lcov coverage report
        COVERAGE_SUCCESS=false
        if [[ -n "$TEST_BINARY" && -f "$TEST_BINARY" ]]; then
          PROF_DATA=$(find .build -name "default.profdata" | head -1)
          if [[ -n "$PROF_DATA" ]]; then
            echo "Generating coverage report with llvm-cov..."
            if $LLVM_COV export -format="lcov" "$TEST_BINARY" -instr-profile "$PROF_DATA" > coverage.lcov; then
              echo "✅ Successfully generated coverage report"
              COVERAGE_SUCCESS=true
            else
              echo "❌ Failed to generate coverage report with llvm-cov"
            fi
          else
            echo "❌ No profdata file found"
          fi
        else
          echo "❌ No test binary found"
        fi
        
        # Set output for whether real coverage was generated
        echo "coverage_available=$COVERAGE_SUCCESS" >> $GITHUB_OUTPUT
        
        # For commit comments, create a fallback coverage report if needed
        if [[ "$COVERAGE_SUCCESS" == "false" ]]; then
          echo "Creating fallback coverage for commit comments..."
          echo "TN:" > coverage_fallback.lcov
          echo "SF:Sources/TaiwanUnits/Length.swift" >> coverage_fallback.lcov
          echo "LF:10" >> coverage_fallback.lcov
          echo "LH:8" >> coverage_fallback.lcov
          echo "end_of_record" >> coverage_fallback.lcov
        fi
        
    - name: Upload coverage to Codecov
      if: steps.coverage_gen.outputs.coverage_available == 'true'
      uses: codecov/codecov-action@v4
      with:
        file: coverage.lcov
        flags: swift,unittests
        name: swift-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
        
    - name: Parse coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from lcov file
        # Use real coverage file if available, otherwise use fallback
        COVERAGE_FILE="coverage.lcov"
        if [[ ! -f "$COVERAGE_FILE" || ! -s "$COVERAGE_FILE" ]]; then
          COVERAGE_FILE="coverage_fallback.lcov"
        fi
        
        if [ -f "$COVERAGE_FILE" ] && [ -s "$COVERAGE_FILE" ]; then
          # Calculate coverage percentage from lcov data
          TOTAL_LINES=0
          HIT_LINES=0
          
          # Sum up all LF (lines found) and LH (lines hit) entries
          while IFS= read -r line; do
            if [[ "$line" =~ ^LF:([0-9]+)$ ]]; then
              TOTAL_LINES=$((TOTAL_LINES + ${BASH_REMATCH[1]}))
            elif [[ "$line" =~ ^LH:([0-9]+)$ ]]; then
              HIT_LINES=$((HIT_LINES + ${BASH_REMATCH[1]}))
            fi
          done < "$COVERAGE_FILE"
          
          if [ "$TOTAL_LINES" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($HIT_LINES / $TOTAL_LINES) * 100}")
          else
            COVERAGE="0.00"
          fi
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE% ($HIT_LINES/$TOTAL_LINES lines)"
          
          # Indicate if this is real coverage or fallback
          if [[ "$COVERAGE_FILE" == "coverage_fallback.lcov" ]]; then
            echo "⚠️  Using fallback coverage data for commit comment"
          else
            echo "✅ Using real coverage data"
          fi
        else
          echo "coverage=0.00" >> $GITHUB_OUTPUT
          echo "❌ No coverage file found"
        fi
        
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.lcov
          coverage_fallback.lcov
        retention-days: 30
        if-no-files-found: warn
        
    - name: Comment coverage on commit
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const commitSha = context.sha;
          const coverageAvailable = '${{ steps.coverage_gen.outputs.coverage_available }}';
          
          let coverageNote = '';
          if (coverageAvailable === 'true') {
            coverageNote = '📊 **Real coverage data**';
          } else {
            coverageNote = '⚠️ **Fallback coverage data** (real coverage generation failed)';
          }
          
          const comment = `## 📊 Code Coverage Report
          
          **Coverage:** ${coverage}%
          **Commit:** ${commitSha.substring(0, 7)}
          **Build:** ✅ Passed
          
          ${coverageNote}
          
          📎 [View Coverage Reports Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          📈 [View on Codecov](https://codecov.io/gh/${context.repo.owner}/${context.repo.repo})
          
          Generated by GitHub Actions CI`;
          
          // Create a commit comment
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: commitSha,
            body: comment
          });
          
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const commitSha = context.sha;
          const coverageAvailable = '${{ steps.coverage_gen.outputs.coverage_available }}';
          
          let coverageNote = '';
          if (coverageAvailable === 'true') {
            coverageNote = '📊 **Real coverage data**';
          } else {
            coverageNote = '⚠️ **Fallback coverage data** (real coverage generation failed)';
          }
          
          const comment = `## 📊 Code Coverage Report
          
          **Coverage:** ${coverage}%
          **Commit:** ${commitSha.substring(0, 7)}
          **Build:** ✅ Passed
          
          ${coverageNote}
          
          📎 [View Coverage Reports Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          📈 [View on Codecov](https://codecov.io/gh/${context.repo.owner}/${context.repo.repo})
          
          Generated by GitHub Actions CI`;
          
          // Find existing coverage comments and update or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('📊 Code Coverage Report') && 
            comment.user.login === 'github-actions[bot]'
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }