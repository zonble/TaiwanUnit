name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: swift build
      
    - name: Run tests with coverage
      run: swift test --enable-code-coverage
      
    - name: Generate coverage report
      run: |
        # Find the test executable path (different on different platforms)
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          TEST_EXECUTABLE=$(find .build -name "TaiwanUnitsPackageTests.xctest" -type d | head -1)
          if [[ -n "$TEST_EXECUTABLE" ]]; then
            TEST_BINARY="$TEST_EXECUTABLE/Contents/MacOS/TaiwanUnitsPackageTests"
          fi
        else
          TEST_BINARY=$(find .build -name "TaiwanUnitsPackageTests.xctest" -type f | head -1)
        fi
        
        # Generate lcov coverage report
        if [[ -n "$TEST_BINARY" && -f "$TEST_BINARY" ]]; then
          xcrun llvm-cov export -format="lcov" "$TEST_BINARY" -instr-profile .build/debug/codecov/default.profdata > coverage.lcov || echo "Coverage export failed, creating empty coverage file"
        else
          echo "Test binary not found, creating empty coverage file"
        fi
        
        # Create empty coverage file if it doesn't exist
        if [[ ! -f coverage.lcov ]]; then
          touch coverage.lcov
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: coverage.lcov
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Parse coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from lcov file
        if [ -f coverage.lcov ] && [ -s coverage.lcov ]; then
          # Calculate coverage percentage from lcov data
          TOTAL_LINES=0
          HIT_LINES=0
          
          # Sum up all LF (lines found) and LH (lines hit) entries
          while IFS= read -r line; do
            if [[ "$line" =~ ^LF:([0-9]+)$ ]]; then
              TOTAL_LINES=$((TOTAL_LINES + ${BASH_REMATCH[1]}))
            elif [[ "$line" =~ ^LH:([0-9]+)$ ]]; then
              HIT_LINES=$((HIT_LINES + ${BASH_REMATCH[1]}))
            fi
          done < coverage.lcov
          
          if [ "$TOTAL_LINES" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($HIT_LINES / $TOTAL_LINES) * 100}")
          else
            COVERAGE="0.00"
          fi
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE% ($HIT_LINES/$TOTAL_LINES lines)"
        else
          echo "coverage=0.00" >> $GITHUB_OUTPUT
          echo "Coverage file not found or empty"
        fi
        
    - name: Comment coverage on commit
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const commitSha = context.sha;
          
          const comment = `## ðŸ“Š Code Coverage Report
          
          **Coverage:** ${coverage}%
          **Commit:** ${commitSha.substring(0, 7)}
          **Build:** âœ… Passed
          
          Generated by GitHub Actions CI`;
          
          // Create a commit comment
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: commitSha,
            body: comment
          });